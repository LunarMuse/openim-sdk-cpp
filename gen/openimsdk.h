/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "export.go"

#include <stdio.h>
#include <stdlib.h>
typedef void (*MessageHandler)(int id ,char* data);
extern MessageHandler messageHandler;
extern void CallMessageHandler(MessageHandler msgHandler,int id,char* data);

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif

extern __declspec(dllexport) void SetMessageHandler(MessageHandler handler);
extern __declspec(dllexport) GoUint8 init_sdk(char* operationID, char* config);
extern __declspec(dllexport) void un_init_sdk(char* operationID);
extern __declspec(dllexport) void login(char* operationID, char* uid, char* token);
extern __declspec(dllexport) void logout(char* operationID);
extern __declspec(dllexport) void set_app_background_status(char* operationID, int isBackground);
extern __declspec(dllexport) void network_status_changed(char* operationID);
extern __declspec(dllexport) GoInt get_login_status(char* operationID);
extern __declspec(dllexport) char* get_login_user();
extern __declspec(dllexport) char* create_text_message(char* operationID, char* text);
extern __declspec(dllexport) char* create_advanced_text_message(char* operationID, char* text, char* messageEntityList);
extern __declspec(dllexport) char* create_text_at_message(char* operationID, char* text, char* atUserList, char* atUsersInfo, char* message);
extern __declspec(dllexport) char* create_location_message(char* operationID, char* description, double longitude, double latitude);
extern __declspec(dllexport) char* create_custom_message(char* operationID, char* data, char* extension, char* description);
extern __declspec(dllexport) char* create_quote_message(char* operationID, char* text, char* message);
extern __declspec(dllexport) char* create_advanced_quote_message(char* operationID, char* text, char* message, char* messageEntityList);
extern __declspec(dllexport) char* create_card_message(char* operationID, char* cardInfo);
extern __declspec(dllexport) char* create_video_message_from_full_path(char* operationID, char* videoFullPath, char* videoType, long long int duration, char* snapshotFullPath);
extern __declspec(dllexport) char* create_image_message_from_full_path(char* operationID, char* imageFullPath);
extern __declspec(dllexport) char* create_sound_message_from_full_path(char* operationID, char* soundPath, long long int duration);
extern __declspec(dllexport) char* create_file_message_from_full_path(char* operationID, char* fileFullPath, char* fileName);
extern __declspec(dllexport) char* create_image_message(char* operationID, char* imagePath);
extern __declspec(dllexport) char* create_image_message_by_url(char* operationID, char* sourcePath, char* sourcePicture, char* bigPicture, char* snapshotPicture);
extern __declspec(dllexport) char* create_sound_message_by_url(char* operationID, char* soundBaseInfo);
extern __declspec(dllexport) char* create_sound_message(char* operationID, char* soundPath, long long int duration);
extern __declspec(dllexport) char* create_video_message_by_url(char* operationID, char* videoBaseInfo);
extern __declspec(dllexport) char* create_video_message(char* operationID, char* videoPath, char* videoType, long long int duration, char* snapshotPath);
extern __declspec(dllexport) char* create_file_message_by_url(char* operationID, char* fileBaseInfo);
extern __declspec(dllexport) char* create_file_message(char* operationID, char* filePath, char* fileName);
extern __declspec(dllexport) char* create_merger_message(char* operationID, char* messageList, char* title, char* summaryList);
extern __declspec(dllexport) char* create_face_message(char* operationID, int index, char* data);
extern __declspec(dllexport) char* create_forward_message(char* operationID, char* m);
extern __declspec(dllexport) void get_all_conversation_list(char* operationID);
extern __declspec(dllexport) void get_conversation_list_split(char* operationID, int offset, int count);
extern __declspec(dllexport) void get_one_conversation(char* operationID, int sessionType, char* sourceID);
extern __declspec(dllexport) void get_multiple_conversation(char* operationID, char* conversationIDList);
extern __declspec(dllexport) void set_conversation_msg_destruct_time(char* operationID, char* conversationID, long long int msgDestructTime);
extern __declspec(dllexport) void set_conversation_is_msg_destruct(char* operationID, char* conversationID, int isMsgDestruct);
extern __declspec(dllexport) void hide_conversation(char* operationID, char* conversationID);
extern __declspec(dllexport) void get_conversation_recv_message_opt(char* operationID, char* conversationIDList);
extern __declspec(dllexport) void set_conversation_draft(char* operationID, char* conversationID, char* draftText);
extern __declspec(dllexport) void reset_conversation_group_at_type(char* operationID, char* conversationID);
extern __declspec(dllexport) void pin_conversation(char* operationID, char* conversationID, int isPinned);
extern __declspec(dllexport) void set_conversation_private_chat(char* operationID, char* conversationID, int isPrivate);
extern __declspec(dllexport) void set_conversation_burn_duration(char* operationID, char* conversationID, int duration);
extern __declspec(dllexport) void set_conversation_recv_message_opt(char* operationID, char* conversationID, int opt);
extern __declspec(dllexport) void get_total_unread_msg_count(char* operationID);
extern __declspec(dllexport) char* get_at_all_tag(char* operationID);
extern __declspec(dllexport) char* get_conversation_id_by_session_type(char* operationID, char* sourceID, int sessionType);
extern __declspec(dllexport) void send_message(char* operationID, char* message, char* recvID, char* groupID, char* offlinePushInfo);
extern __declspec(dllexport) void send_message_not_oss(char* operationID, char* message, char* recvID, char* groupID, char* offlinePushInfo);
extern __declspec(dllexport) void find_message_list(char* operationID, char* findMessageOptions);
extern __declspec(dllexport) void get_advanced_history_message_list(char* operationID, char* getMessageOptions);
extern __declspec(dllexport) void get_advanced_history_message_list_reverse(char* operationID, char* getMessageOptions);
extern __declspec(dllexport) void revoke_message(char* operationID, char* conversationID, char* clientMsgID);
extern __declspec(dllexport) void typing_status_update(char* operationID, char* recvID, char* msgTip);
extern __declspec(dllexport) void mark_conversation_message_as_read(char* operationID, char* conversationID);
extern __declspec(dllexport) void delete_message_from_local_storage(char* operationID, char* conversationID, char* clientMsgID);
extern __declspec(dllexport) void delete_message(char* operationID, char* conversationID, char* clientMsgID);
extern __declspec(dllexport) void hide_all_conversations(char* operationID);
extern __declspec(dllexport) void delete_all_msg_from_local_and_svr(char* operationID);
extern __declspec(dllexport) void delete_all_msg_from_local(char* operationID);
extern __declspec(dllexport) void clear_conversation_and_delete_all_msg(char* operationID, char* conversationID);
extern __declspec(dllexport) void delete_conversation_and_delete_all_msg(char* operationID, char* conversationID);
extern __declspec(dllexport) void insert_single_message_to_local_storage(char* operationID, char* message, char* recvID, char* sendID);
extern __declspec(dllexport) void insert_group_message_to_local_storage(char* operationID, char* message, char* groupID, char* sendID);
extern __declspec(dllexport) void search_local_messages(char* operationID, char* searchParam);
extern __declspec(dllexport) void set_message_local_ex(char* operationID, char* conversationID, char* clientMsgID, char* localEx);
extern __declspec(dllexport) void get_users_info(char* operationID, char* userIDs);
extern __declspec(dllexport) void get_users_info_with_cache(char* operationID, char* userIDs, char* groupID);
extern __declspec(dllexport) void get_users_info_from_srv(char* operationID, char* userIDs);
extern __declspec(dllexport) void set_self_info(char* operationID, char* userInfo);
extern __declspec(dllexport) void set_global_recv_message_opt(char* operationID, int opt);
extern __declspec(dllexport) void get_self_user_info(char* operationID);
extern __declspec(dllexport) void update_msg_sender_info(char* operationID, char* nickname, char* faceURL);
extern __declspec(dllexport) void subscribe_users_status(char* operationID, char* userIDs);
extern __declspec(dllexport) void unsubscribe_users_status(char* operationID, char* userIDs);
extern __declspec(dllexport) void get_subscribe_users_status(char* operationID);
extern __declspec(dllexport) void get_user_status(char* operationID, char* userIDs);

// =====================================================friend===============================================
//
extern __declspec(dllexport) void get_specified_friends_info(char* operationID, char* userIDList);
extern __declspec(dllexport) void get_friend_list(char* operationID);
extern __declspec(dllexport) void get_friend_list_page(char* operationID, int offset, int count);
extern __declspec(dllexport) void search_friends(char* operationID, char* searchParam);
extern __declspec(dllexport) void check_friend(char* operationID, char* userIDList);
extern __declspec(dllexport) void add_friend(char* operationID, char* userIDReqMsg);
extern __declspec(dllexport) void set_friend_remark(char* operationID, char* userIDRemark);
extern __declspec(dllexport) void delete_friend(char* operationID, char* friendUserID);
extern __declspec(dllexport) void get_friend_application_list_as_recipient(char* operationID);
extern __declspec(dllexport) void get_friend_application_list_as_applicant(char* operationID);
extern __declspec(dllexport) void accept_friend_application(char* operationID, char* userIDHandleMsg);
extern __declspec(dllexport) void refuse_friend_application(char* operationID, char* userIDHandleMsg);
extern __declspec(dllexport) void add_black(char* operationID, char* blackUserID, char* ex);
extern __declspec(dllexport) void get_black_list(char* operationID);
extern __declspec(dllexport) void remove_black(char* operationID, char* removeUserID);

// =====================================================group===============================================
// CreateGroup creates a group
//
extern __declspec(dllexport) void create_group(char* operationID, char* groupReqInfo);

// JoinGroup joins a group
//
extern __declspec(dllexport) void join_group(char* operationID, char* groupId, char* reqMsg, int joinSource, char* ex);

// QuitGroup quits a group
//
extern __declspec(dllexport) void quit_group(char* operationID, char* groupId);

// DismissGroup dismisses a group
//
extern __declspec(dllexport) void dismiss_group(char* operationID, char* groupId);

// ChangeGroupMute changes the mute status of a group
//
extern __declspec(dllexport) void change_group_mute(char* operationID, char* groupId, int cIsMute);

// ChangeGroupMemberMute changes the mute status of a group member
//
extern __declspec(dllexport) void change_group_member_mute(char* operationID, char* groupId, char* userId, int mutedSeconds);

// SetGroupMemberRoleLevel sets the role level of a group member
//
extern __declspec(dllexport) void set_group_member_role_level(char* operationID, char* groupId, char* userId, int roleLevel);

// SetGroupMemberInfo sets the information of a group member
//
extern __declspec(dllexport) void set_group_member_info(char* operationID, char* groupMemberInfo);

// GetJoinedGroupList retrieves the list of joined groups
//
extern __declspec(dllexport) void get_joined_group_list(char* operationID);

// GetSpecifiedGroupsInfo retrieves the information of specified groups
//
extern __declspec(dllexport) void get_specified_groups_info(char* operationID, char* groupIdList);

// SearchGroups searches for groups
//
extern __declspec(dllexport) void search_groups(char* operationID, char* searchParam);

// SetGroupInfo sets the information of a group
//
extern __declspec(dllexport) void set_group_info(char* operationID, char* groupInfo);

// SetGroupVerification sets the verification mode of a group
//
extern __declspec(dllexport) void set_group_verification(char* operationID, char* groupId, int verification);

// SetGroupLookMemberInfo sets the member information visibility of a group
//
extern __declspec(dllexport) void set_group_look_member_info(char* operationID, char* groupId, int cRule);

// SetGroupApplyMemberFriend sets the friend rule for group applicants
//
extern __declspec(dllexport) void set_group_apply_member_friend(char* operationID, char* groupId, int cRule);

// GetGroupMemberList retrieves the list of group members
//
extern __declspec(dllexport) void get_group_member_list(char* operationID, char* groupId, int cFilter, int cOffset, int cCount);

// GetGroupMemberOwnerAndAdmin retrieves the owner and admin members of a group
//
extern __declspec(dllexport) void get_group_member_owner_and_admin(char* operationID, char* groupId);

// GetGroupMemberListByJoinTimeFilter retrieves the list of group members filtered by join time
//
extern __declspec(dllexport) void get_group_member_list_by_join_time_filter(char* operationID, char* groupId, int cOffset, int cCount, long long int cJoinTimeBegin, long long int cJoinTimeEnd, char* cFilterUserIDList);

// GetSpecifiedGroupMembersInfo retrieves the information of specified group members
//
extern __declspec(dllexport) void get_specified_group_members_info(char* operationID, char* groupId, char* userIdList);

// KickGroupMember kicks group members
//
extern __declspec(dllexport) void kick_group_member(char* operationID, char* groupId, char* cReason, char* userIdList);

// TransferGroupOwner transfers the ownership of a group
//
extern __declspec(dllexport) void transfer_group_owner(char* operationID, char* groupId, char* cNewOwnerUserID);

// InviteUserToGroup invites users to a group
//
extern __declspec(dllexport) void invite_user_to_group(char* operationID, char* groupId, char* cReason, char* userIdList);

// GetGroupApplicationListAsRecipient retrieves the group application list as a recipient
//
extern __declspec(dllexport) void get_group_application_list_as_recipient(char* operationID);

// GetGroupApplicationListAsApplicant retrieves the group application list as an applicant
//
extern __declspec(dllexport) void get_group_application_list_as_applicant(char* operationID);

// AcceptGroupApplication accepts a group application
//
extern __declspec(dllexport) void accept_group_application(char* operationID, char* groupId, char* fromUserId, char* handleMsg);

// RefuseGroupApplication refuses a group application
//
extern __declspec(dllexport) void refuse_group_application(char* operationID, char* groupId, char* fromUserId, char* handleMsg);

// SetGroupMemberNickname sets the nickname of a group member
//
extern __declspec(dllexport) void set_group_member_nickname(char* operationID, char* groupId, char* userId, char* groupMemberNickname);

// SearchGroupMembers searches for group members
//
extern __declspec(dllexport) void search_group_members(char* operationID, char* searchParam);

// IsJoinGroup checks if the user has joined a group
//
extern __declspec(dllexport) void is_join_group(char* operationID, char* groupId);

#ifdef __cplusplus
}
#endif
